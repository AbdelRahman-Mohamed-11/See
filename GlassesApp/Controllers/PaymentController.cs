using Application.Interfaces;
using Core.DTOS;
using Core.Entities.Order;
using Infrastructure.Identity;
using Infrastructure.Persistence;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;

namespace GlassesApp.Controllers
{
    public class PaymentController : BaseApiController
    {
        private readonly HttpClient _httpClient;
        private readonly IConfiguration _conf;
        private readonly IOrderInterface _orderService;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly ApplicationDbContext _dbContext;

        public PaymentController(HttpClient httpClient , 
            IConfiguration conf,IOrderInterface orderService,
            UserManager<ApplicationUser> userManager,
            ApplicationDbContext dbContext)
        {
            _httpClient = httpClient;
            _conf = conf;
            _orderService = orderService;
            _userManager = userManager;
            _dbContext = dbContext;
        }

        [HttpPost("pay")]
        //[Authorize(Roles = "AppUser")]
        public async Task<ActionResult> Pay([FromBody]OrderIdDTO 
            orderIdDTO)
        {
            var order = await _orderService.GetOrderById(orderIdDTO.OrderId);
           
            if (order == null)
                throw new Exception("order not exisst");

            var response =  await FirstStep(order);

            order.OrderPayId = response.OrderPaymentId;
            
            order.Status = OrderStatus.Processing;

            await _dbContext.SaveChangesAsync();

            string frameUrl = $"{_conf["payment:IFrame"]}{response.Token}";

            return Ok(new MessageResponse { Message = frameUrl });
        }

        private async Task<ReturnPaymentInformation> FirstStep(Order 
            order)
        {
            // get the order 

            var data = new
            {
                api_key = _conf["payment:apiKey"]
            };

            var request = await new HttpClient()
                .PostAsync("https://accept.paymob.com/api/auth/tokens", 
                new StringContent(JsonConvert.SerializeObject(data), 
                Encoding.UTF8, "application/json"));

            var response = await request.Content.ReadAsStringAsync();

            var token = (string)JsonConvert.DeserializeObject<dynamic>(response).token;

            ReturnPaymentInformation payInfo = await SecondStep(token, order);

            return payInfo;
        }

        private async Task<ReturnPaymentInformation> SecondStep(
            string token, Order order)
        {
            
            var data = new
            {
                auth_token = token,
                delivery_needed = "false",
                amount_cents = order.SubTotal * 100,
                currency = "EGP",
                items = new object[] {},
            };

            var request = await new HttpClient()
                .PostAsync("https://accept.paymob.com/api/ecommerce/orders",
                new StringContent(JsonConvert.SerializeObject(data),
                Encoding.UTF8, "application/json"));

            var response = await request.Content.ReadAsStringAsync();


            // the following is the orderId that generated by paymob
            var id = (string)JsonConvert.DeserializeObject<dynamic>(response).id;


            var payInfo = await ThirdStep(token, id, order);

            
            return payInfo;
        }

        private async Task<ReturnPaymentInformation> ThirdStep(
            string token, string id, Order order)
        {
            var user = await _userManager.FindByIdAsync(order.UserId.ToString());

            var data = new
            {
                auth_token = token,
                amount_cents = order.SubTotal * 100,
                expiration = 3600,
                order_id = id,
                billing_data = new // all these fields are manadtory for paymob
                {
                    apartment = "NA",
                    email = user.Email,
                    floor = "NA",
                    first_name = user.FirstName ,
                    last_name = user.LastName,
                    street = "NA",
                    building = "NA",
                    phone_number = order.PhoneNumber,
                    shipping_method = "NA",
                    postal_code = "NA",
                    city = order.ShipToAddress.CityId,
                    country = "EGYPT",
                    state = "NA"
                },
                currency = "EGP",
                integration_id = _conf["payment:integrationId"]
            };

            var client = new HttpClient();
            var request = 
                new HttpRequestMessage(HttpMethod.Post,
                "https://accept.paymob.com/api/acceptance/payment_keys")
            {
                Content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json")
            };
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var responseData = JsonConvert.DeserializeObject<dynamic>(await response.Content.ReadAsStringAsync());
                var TheToken = (string)responseData.token;

                return new ReturnPaymentInformation()
                {
                    OrderPaymentId = id,
                    Token = TheToken
                };
            }

            return null;
        }

        
        [HttpPost("notify")]

        public async Task<IActionResult> Notify([FromBody] 
        PaymobPaymentContainer payload, [FromQuery] string hmac)
        {
            var orderPayId = payload.obj.Order.Id.ToString();

            var transactionId = payload.obj.Id.ToString();

            var isSucessPaid = payload.obj.Success;

            var requestHAMCString =
                payload.obj.amount_cents.ToString() +
                payload.obj.created_at.ToString() +
                payload.obj.Currency +
                payload.obj.error_occured.ToString().ToLower() +
                payload.obj.has_parent_transaction.ToString().ToLower() +
                payload.obj.Id.ToString() +
                payload.obj.integration_id.ToString() +
                payload.obj.is_3d_secure.ToString().ToLower() +
                payload.obj.is_auth.ToString().ToLower() +
                payload.obj.is_capture.ToString().ToLower() +
                payload.obj.is_refunded.ToString().ToLower() +
                payload.obj.is_standalone_payment.ToString().ToLower() +
                payload.obj.is_voided.ToString().ToLower() +
                orderPayId.ToString() +
                payload.obj.owner.ToString() +
                payload.obj.Pending.ToString().ToLower() +
                payload.obj.source_data.Pan +
                payload.obj.source_data.sub_type +
                payload.obj.source_data.Type +
                payload.obj.Success.ToString().ToLower();


            byte[] inputBytes = Encoding.UTF8.GetBytes(requestHAMCString);
            
            byte[] secretBytes = Encoding.UTF8.GetBytes(_conf["Payment:HMAC"]);

            using (var hamcKey = new HMACSHA512(secretBytes))
            {
                byte[] hash = hamcKey.ComputeHash(inputBytes);
                
                string hashString = BitConverter.ToString(hash).Replace("-", "");
                
                var isValidRequest = string.Equals(hmac, hashString, StringComparison.OrdinalIgnoreCase);


                if (!isValidRequest)
                    return BadRequest();

                var order = _dbContext.Orders
                .FirstOrDefault(o => o.OrderPayId == orderPayId); ;

                if (order is null)
                    return BadRequest("Order Does Not Exist");


                if (isSucessPaid)
                {
                    order.TransactionId = transactionId;
                }

                else
                {
                    order.Status = OrderStatus.PaymentFailed;
                }

                await _dbContext.SaveChangesAsync();

                await AuditTransactionToDatabaseAsync(payload, orderPayId, transactionId, isSucessPaid, order);

            }

            return Ok();
        }

        private async Task AuditTransactionToDatabaseAsync(
            PaymobPaymentContainer payload,
            string orderPayId,
            string transactionId,
            bool isSucessPaid,
            Order order)
        {
            await _dbContext.PaymobTransactions.AddAsync(new()
            {
                TransactionId = transactionId,
                OrderPayId = orderPayId,
                Amount = payload.obj.amount_cents,
                CreatedDate = payload.obj.created_at,
                IsSucessTransaction = isSucessPaid,
                OrderId = order.Id
            });
            
            await _dbContext.SaveChangesAsync();
        }

    }
}
